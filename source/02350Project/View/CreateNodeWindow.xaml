<Window x:Class="_02350Project.View.CreateNodeWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        DataContext="{Binding CreateNodeDialog, Source={StaticResource Locator}}"
        Title="Create class" Height="454" Width="370" ResizeMode="NoResize"
        >
    <!-- DataContext is set to bind our viewmodel CreateClassViewModel to this view.
        We refer to the viewmodel as CreateClassDialog as specified in ViewModel.ViewModelLocator.cs -->

    <Window.InputBindings>
        <KeyBinding Key="Delete" Command="{Binding RemoveItemCommand}"/>

    </Window.InputBindings>

    <DockPanel LastChildFill="True" Background="WhiteSmoke">
        <DockPanel DockPanel.Dock="Top" Margin="10,10,10,0" LastChildFill="True">
            <Label DockPanel.Dock="Left" Width="100" FontWeight="Bold" Content="Class Name"/>
            <TextBox DockPanel.Dock="Right" Text="{Binding NodeName}" VerticalAlignment="Center"/>
        </DockPanel>
        <DockPanel DockPanel.Dock="Top" Margin="10,5,10,0">
            <Label DockPanel.Dock="Left" Width="100" FontWeight="Bold" Content="Class Type"/>

            <!-- <RadioButton GroupName="ClassFlag" Margin="0,0,5,0" IsChecked="{Binding NoneCheck, FallbackValue=true, Mode=TwoWay}" Content="Default"/>
                <RadioButton GroupName="ClassFlag" Margin="0,0,5,0" IsChecked="{Binding AbstractCheck, FallbackValue=false, Mode=TwoWay}" Content="Abstract"/>
                <RadioButton GroupName="ClassFlag" Margin="0,0,5,0" IsChecked="{Binding InterfaceCheck, FallbackValue=false, Mode=TwoWay}" Content="Interface"/> -->

            <!--http://stackoverflow.com/questions/2284752/mvvm-binding-radio-buttons-to-a-view-model-->
            <!-- Problem: Radio buttons when binded to their own boolean value in the viewmodel doesn't update each other. This was the most elegant solution we found.
                              Using a stylized listbox to achieve the functionality we wanted. Credits go the creator -->
            <ListBox ItemsSource="{Binding RadioChoices}" SelectedItem="{Binding SelectedChoice}" BorderThickness="0" Background="WhiteSmoke">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                    <RadioButton Content="{TemplateBinding Content}"
                                     IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSelected}"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>


        </DockPanel>

        <DockPanel DockPanel.Dock="Top" Margin="10,10,10,0" LastChildFill="True">
            <Label DockPanel.Dock="Left" Width="100" FontWeight="Bold">Attributes</Label>

            <ListBox DockPanel.Dock="Right" Height="100" ItemsSource="{Binding Attributes}" SelectedItem="{Binding SelectedItem}">
            </ListBox>
        </DockPanel>
        <DockPanel DockPanel.Dock="Top" Margin="10,5,10,0">
            <Label DockPanel.Dock="Left" Width="100" FontWeight="Bold">Add Attribute</Label>
            <DockPanel LastChildFill="True">
                <Button Name="AttributeAddButton" MinWidth="20" Command="{Binding AddAttributeCommand}" IsEnabled="{Binding CanAddAttribute}" Height="{Binding ActualHeight, ElementName=AttributeAddBox}" Content="+" Padding="0"/>
                <TextBox Name="AttributeAddBox" Text="{Binding ActualAttribute, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center">
                    <TextBox.InputBindings>
                        <KeyBinding Command="{Binding AddAttributeCommand}" Key="Enter"/>
                    </TextBox.InputBindings>
                </TextBox>
            </DockPanel>
        </DockPanel>
        <DockPanel DockPanel.Dock="Top" Margin="10,10,10,0" LastChildFill="True">
            <Label DockPanel.Dock="Left" Width="100" FontWeight="Bold">Methods</Label>
            <ListBox DockPanel.Dock="Right" Height="100" ItemsSource="{Binding Methods}" SelectedItem="{Binding SelectedItem}">

            </ListBox>
        </DockPanel>
        <DockPanel DockPanel.Dock="Top" Margin="10,5,10,0">
            <Label DockPanel.Dock="Left" Width="100" FontWeight="Bold">Add Method</Label>
            <DockPanel LastChildFill="True">
                <Button Name="MethodAddButton" MinWidth="{Binding ActualWidth, ElementName=AttributeAddButton}" Command="{Binding AddMethodCommand}" Height="{Binding ActualHeight, ElementName=MethodAddBox}" Content="+" Padding="0"/>
                <TextBox Name="MethodAddBox" Text="{Binding ActualMethod, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center">
                    <TextBox.InputBindings>
                        <KeyBinding Command="{Binding AddMethodCommand}" Key="Enter"/>
                    </TextBox.InputBindings>
                </TextBox>
            </DockPanel>
        </DockPanel>
        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Margin="10,10,10,10" HorizontalAlignment="Right">
            <Button Content="Create" Width="79" Height="23" Margin="0,0,4,0" Command="{Binding CreateNodeCommand}"/>
            <Button Content="Cancel" Width="79" Height="23" Command="{Binding CancelNodeCommand}"/>

        </StackPanel>
    </DockPanel>


</Window>
