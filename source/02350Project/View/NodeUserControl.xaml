<UserControl Name="Node"
             x:Class="_02350Project.View.NodeUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WPF45"
             mc:Ignorable="d"
             xmlns:c="clr-namespace:_02350Project.Other"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:toolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit"
             Canvas.Left="{Binding X}" Canvas.Top="{Binding Y}" MinWidth="135"
             c:SizeObserver.Observe="true" c:SizeObserver.ObservedHeight="{Binding Height, Mode=OneWayToSource}"
             c:SizeObserver.ObservedWidth="{Binding Width, Mode=OneWayToSource}">
    <!--
        ListBox Styling found from: http://social.msdn.microsoft.com/Forums/vstudio/en-US/5922cda0-c668-4333-a44d-7dab266555b4/listbox-readonly?forum=wpf
    -->
    <UserControl.Resources>
        <!--http://stackoverflow.com/questions/1499016/reusing-a-treeviews-expand-and-collapse-buttons-in-wpf-->
        <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
        <ControlTemplate x:Key="toggleButtonTemplate" TargetType="ToggleButton">
            <Grid
            Width="15"
            Height="13"
            Background="Transparent">
                <Path x:Name="ExpandPath"
              HorizontalAlignment="Left" 
              VerticalAlignment="Center" 
              Margin="1,1,1,1"
              Fill="{StaticResource GlyphBrush}"
              Data="M 4 0 L 8 4 L 4 8 Z"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsChecked"
                 Value="True">
                    <Setter Property="Data"
                  TargetName="ExpandPath"
                  Value="M 0 4 L 8 4 L 4 8 Z"/> 
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="toggleButtonStyle" TargetType="ToggleButton">
            <Setter Property="Template" Value="{StaticResource toggleButtonTemplate}" />
        </Style>

        <!-- http://stackoverflow.com/questions/1013817/wpf-fade-animation/1015635#1015635 -->
        <Style x:Key="nodeShrink" TargetType="{x:Type FrameworkElement}">
            <Style.Resources>
                <Storyboard x:Key="FadeInMenu">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(LayoutTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="{x:Null}">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="{x:Null}">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="{x:Null}">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Visible}"/>
                    </ObjectAnimationUsingKeyFrames>
                </Storyboard>
                <Storyboard x:Key="FadeOutMenu">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(LayoutTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="{x:Null}">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="{x:Null}">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="{x:Null}">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Visible}"/>
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}"/>
                    </ObjectAnimationUsingKeyFrames>
                </Storyboard>
            </Style.Resources>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Self}}" Value="true">
                    <DataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource FadeInMenu}"/>
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource FadeOutMenu}"/>
                    </DataTrigger.ExitActions>
                </DataTrigger>
            </Style.Triggers>
            <Setter Property="Visibility" Value="Collapsed" />
        </Style>
            
        <BooleanToVisibilityConverter x:Key="BoolToVis"/>
        <c:BooleanToItalicConverter x:Key="BoolToItalic"/>
    </UserControl.Resources>


    <!--http://www.codeproject.com/Tips/286211/All-purpose-Boolean-to-Visibility-Converter
            Convert VisibilityToBoolean so true:Visible, false:Hidden and not true:Visible, false:Collapsed-->
    <Border Name="selectBorder" BorderThickness="0" CornerRadius="3" BorderBrush="Blue" Background="LightSkyBlue">
        <Border Name="border" BorderBrush="LightGray" BorderThickness="1" CornerRadius="2" Background="WhiteSmoke" Opacity="{Binding Opacity}" Tag="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}">
            
            <Border.ContextMenu>
                <ContextMenu DataContext="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                    <MenuItem Header="Cut" InputGestureText="Ctrl+X">
                        <MenuItem.Icon>
                            <Image Source="../Resources/Images/clipboardgroup/edit-cut.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Copy" InputGestureText="Ctrl+C">
                        <MenuItem.Icon>
                            <Image Source="../Resources/Images/clipboardgroup/edit-copy.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="Edit" Command="{Binding EditNodeCommand}" InputGestureText="???">
                        <MenuItem.Icon>
                            <Image Source="../Resources/Images/classgroup/editclass-16.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Delete" Command="{Binding RemoveNodeCommand}" InputGestureText="Del">
                        <MenuItem.Icon>
                            <Image Source="../Resources/Images/classgroup/removeclass-16.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="Cancel" InputGestureText="Esc">
                        <MenuItem.Icon>
                            <Image Source="../Resources/Images/editgroup/edit-clear-16.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Border.ContextMenu>


            <DockPanel Margin="0,7,0,7">


            <!-- <TextBlock Text="«Interface»" FontSize="10" TextAlignment="Center" Visibility="{Binding InterfaceFlag, Converter={StaticResource BoolToVis}}"/>-->

            <!--NODE HEADER START-->
            <StackPanel Margin="7,0,7,0" DockPanel.Dock="Top">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="{Binding Name, FallbackValue=[CLASS_NAME]}" FontStyle="{Binding AbstractFlag, Converter={StaticResource BoolToItalic}}" FontWeight="Bold" Grid.Column="0"/>
                    <ToggleButton Style="{StaticResource toggleButtonStyle}" Cursor="Hand" Grid.Column="2" IsChecked="{Binding NodeCollapsed}" />
                </Grid>
                <TextBlock Text="{Binding NodeSubText, FallbackValue=ABSTRACT_CLASS}" FontSize="11"/>
            </StackPanel>

            <!--NODE HEADER END-->

            <!--NODE CONTENT START-->
                <Grid Style="{StaticResource nodeShrink}" Tag="{Binding NodeCollapsed}" Visibility="Visible" Margin="0,7,0,0">
                    <Grid.LayoutTransform>
                        <ScaleTransform ScaleY="1"/>
                    </Grid.LayoutTransform>
                    <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!--ATTRIBUTE START-->
                <!--ATTRIBUTE HEADER START-->
                <StackPanel Name="AttributeHeaderPanel" Grid.Row="0" Orientation="Horizontal" Background="LightGray">
                    <ToggleButton Cursor="Hand" Height="10" Width="10" Content="+" Style="{StaticResource toggleButtonStyle}" Margin="5,0,0,0" IsChecked="{Binding AttCollapsed}"/>
                    <TextBlock Text="Attributes" Margin="5,0,0,0" FontSize="11"/>
                </StackPanel>
                <!--ATTRIBUTE HEADER END-->

                <!--ATTRIBUTE CONTENT START-->
                    <ListBox Style="{StaticResource nodeShrink}" Tag="{Binding AttCollapsed}" Grid.Row="1" IsEnabled="False" ItemsSource="{Binding Attributes}" Margin="10,2,10,2" Visibility="Visible">
                        <ListBox.LayoutTransform>
                            <ScaleTransform ScaleY="1"/>
                        </ListBox.LayoutTransform>
                        <ListBox.Template>
                        <ControlTemplate TargetType="{x:Type ListBox}">
                            <Grid>
                                <Border BorderThickness="0"/>
                                <ScrollViewer Margin="1" Focusable="true" Background="WhiteSmoke" Padding="-1" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Foreground="Black">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Grid>
                        </ControlTemplate>
                    </ListBox.Template>
                    <ListBox.Resources>
                        <Style x:Key="{x:Type ListBoxItem}">
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <ContentPresenter/>
                                    </ControlTemplate >
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.Resources>
                </ListBox>
                <!--ATTRIBUTE CONTENT END-->
                <!--ATTRIBUTE END-->

                <!--METHOD START-->
                <!--METHOD HEADER START-->
                <StackPanel Grid.Row="2" Orientation="Horizontal" Background="{Binding Path=Background, ElementName=AttributeHeaderPanel}">
                    <ToggleButton Height="10" Width="10" Content="+" Style="{StaticResource toggleButtonStyle}" Margin="5,0,0,0" IsChecked="{Binding MetCollapsed}" Cursor="Hand"/>
                    <TextBlock Text="Methods" Margin="5,0,0,0" FontSize="11"/>
                </StackPanel>
                <!--METHOD HEADER END-->

                <!--METHOD CONTENT START-->
                    <ListBox Name="MethodListBox" Style="{StaticResource nodeShrink}" Tag="{Binding MetCollapsed}" Grid.Row="3" IsEnabled="False" ItemsSource="{Binding Methods}" Margin="10,2,10,2" Visibility="Visible">
                        <ListBox.LayoutTransform>
                            <ScaleTransform ScaleY="1"/>
                        </ListBox.LayoutTransform>
                        <ListBox.Template>
                        <ControlTemplate TargetType="{x:Type ListBox}">
                            <Grid>
                                <Border BorderThickness="0"/>
                                <ScrollViewer Margin="1" Focusable="false" Background="WhiteSmoke" Padding="-1" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Foreground="Black">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Grid>
                        </ControlTemplate>
                    </ListBox.Template>
                    <ListBox.Resources>
                        <Style x:Key="{x:Type ListBoxItem}">
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <ContentPresenter/>
                                    </ControlTemplate >
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.Resources>
                </ListBox>
                <!--METHOD CONTENT END-->
                <!--METHOD END-->
            </Grid>
            <!--NODE CONTENT END-->
        </DockPanel>
        
        <Border.Effect>
            <DropShadowEffect Opacity="0.25" ShadowDepth="2"/>
        </Border.Effect>
    </Border>
    </Border>

    <!--TRIGGERS START-->
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="MouseDown">
            <cmd:EventToCommand Command="{Binding DataContext.MouseDownNodeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="MouseUp">
            <cmd:EventToCommand Command="{Binding DataContext.MouseUpNodeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="MouseMove">
            <cmd:EventToCommand Command="{Binding DataContext.MouseMoveNodeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="SizeChanged">
            <cmd:EventToCommand Command="{Binding DataContext.ExpandResizeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <!--TRIGGERS END-->

</UserControl>
